create type person as object (
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    contact_number VARCHAR2(15),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    email VARCHAR2(100) UNIQUE,
    gender CHAR(1) CHECK (gender IN ('M', 'F')) NOT NULL,
    date_of_birth DATE NOT NULL,
);

CREATE TABLE patients (
  patient_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  personal_info person
);


CREATE TABLE doctors (
  doctor_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  specialization VARCHAR2(100),
  personal_info person,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE appointments (
  appointment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  patient_id NUMBER NOT NULL,
  doctor_id NUMBER NOT NULL,
  appointment_date TIMESTAMP NOT NULL,
  status VARCHAR2(10) CHECK (status IN ('Scheduled', 'Completed', 'Cancelled')) NOT NULL,
  remarks VARCHAR2(4000),
  CONSTRAINT fk_appointments_patient FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
  CONSTRAINT fk_appointments_doctor FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id)
);


CREATE TABLE medical_records (
  record_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  patient_id NUMBER NOT NULL,
  doctor_id NUMBER NOT NULL,
  visit_date TIMESTAMP NOT NULL,
  diagnosis VARCHAR2(4000) NOT NULL,
  treatment VARCHAR2(4000) NOT NULL,
  prescription VARCHAR2(4000),
  audio_notes BLOB,
  CONSTRAINT fk_medical_records_patient FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
  CONSTRAINT fk_medical_records_doctor FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id)
);

-- Lab Results Table
CREATE TABLE lab_results (
  lab_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  patient_id NUMBER NOT NULL,
  test_name VARCHAR2(100) NOT NULL,
  test_date TIMESTAMP NOT NULL,
  result_text VARCHAR2(4000),
  result_image BLOB,
  CONSTRAINT fk_lab_results_patient FOREIGN KEY (patient_id) REFERENCES patients(patient_id)
);

-- Medications Table
CREATE TABLE medications (
  medication_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100) NOT NULL,
  description VARCHAR2(4000),
  side_effects VARCHAR2(4000)
);

create type medication_nested_table as table of medications;

-- Prescriptions Table
CREATE TABLE prescriptions (
  prescription_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  record_id NUMBER NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE,
  prescription_medications medication_nested_table;
  CONSTRAINT fk_prescriptions_record FOREIGN KEY (record_id) REFERENCES medical_records(record_id),
);
nested table prescription_medications store as tab_medications;

-- Billing Table
CREATE TABLE billing (
  bill_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  appointment_id NUMBER NOT NULL,
  total_amount NUMBER(10, 2) NOT NULL,
  payment_status VARCHAR2(10) CHECK (payment_status IN ('Pending', 'Paid')) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_billing_appointment FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id)
);

-- Rooms Table
CREATE TABLE rooms (
  room_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_number VARCHAR2(10) UNIQUE NOT NULL,
  room_type VARCHAR2(10) CHECK (room_type IN ('General', 'Private', 'ICU')) NOT NULL,
  status VARCHAR2(10) CHECK (status IN ('Available', 'Occupied')) NOT NULL
);

-- Admissions Table
CREATE TABLE admissions (
  admission_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  patient_id NUMBER NOT NULL,
  room_id NUMBER NOT NULL,
  admission_date TIMESTAMP NOT NULL,
  discharge_date TIMESTAMP,
  reason VARCHAR2(4000) NOT NULL,
  status VARCHAR2(10) CHECK (status IN ('Admitted', 'Discharged')) NOT NULL,
  video_recording BLOB,
  CONSTRAINT fk_admissions_patient FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
  CONSTRAINT fk_admissions_room FOREIGN KEY (room_id) REFERENCES rooms(room_id)
);
